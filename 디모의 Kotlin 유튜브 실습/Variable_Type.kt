// 출저: 테크과학! DiMo

    // 한줄 짜리 주석

    /*
    여러 줄의 주석
     */

    // 코틀린은 구문이 끝나는 부분에 ;세미콜론을 적지 않아도 된다

    /*
    클래스 이름:
    - 파스칼 표기법: 모든 단어를 대문자로 시작

    함수 이름:
    - 카멜 표기법: 첫 단어만 소문자로 시작
    */

    // 1. 변수 선언
    // 1) var: 일반적으로 통용되는 변수로 언제든지 읽기 쓰기가 가능함
    // 2) val: 선언시에만 초기화 가능하고 중간에 값을 변경할 수 없다.
    //         런타임시 변경되지 말아야 할 값은 안전하게 val로 선언하는 것이 좋다.

    // 선언 위치에 따른 종류
    // 1) Property(속성): 클래스에 선언된 변수
    // 2) Scope 내에 선언된 변수 ㅡ Local Variable(로컬 변수)

    // 코틀린에서는 fun main()이 코드의 시작 지점


    fun main() {
        // 변수 선언 - var 변수이름: 변수 타입
        var a: Int
        // 변수 초기화 - 코틀린의 변수는 사용 전에 반드시 초기화 해야 한다.
        a = 123
        // 기존 언어들은 변수 선언 후에 값이 초기화 되지 않을 경우,
        // 기본 값으로 초기화 되거나 null값을 가지게 되지만
        // Kotlin은 반드시 변수가 초기화돼야 한다.
        // 그래서 nullPointerException을 원천적으로 차단한다.

        // 선언 시에 초기화 해도 된다.
        var b: Int = 1234
        println(b)

        // 하지만 만약 변수에 값을 지정하지 않아야 하는 경우에는
        // 변수 선언 시에 변수타입 뒤에 ?= null을 붙여 줌으로써
        // null을 허용하는 nullable 변수로 선언해 줄 수도 있다.
        // 하지만 이 경우 nullPointerException이 발생할 수 있으므로,
        // 꼭 필요한 경우에만 사용한다.

        var c: Int? = null
        println(c)

        // 이 외에도 변수의 초기화를 늦추는 lateinit이나 lazy속성도 있다.

        // 기본 자료형: 자바와 거의 동일
        /*
        정수형 -
        10진수, 16진수, 2진수로 정수형을 표시할 수 있는데,
        32bit의 10진수가 기본이다.
        16진수: 0x 앞에 붙이기
        2진수: 0b를 앞에 붙이기.
        코틀린은 8진수의 표기는 지원하지 않는다.

        소수형 -
        기본형은 Double이다. 필요시 exponential지수 표기법을 추가하면 된다.
        var a:Double = 123.5
        var b:Double = 123.5e10 (e는 exponential의 약어)
        float형은 f을 붙이면 16bit의 f로 취급.

        Char - 1개의 문자
        유니코드 인코딩 중의 하나인 UTF-16BE로 관리. 2bytes의 메모리를 사용.
        특수 문지 지원. \t 탭...등등.

        Boolean
        var a:Boolean = true

        String - 여러 줄의 문자열 입력 시 """ """ 따옴표 세개로 감싸 주기.
        val a = "one line string test"
        val b = """null
        string
        test""
       */
    }

