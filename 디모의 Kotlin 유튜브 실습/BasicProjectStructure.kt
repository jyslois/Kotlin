/*
하나의 프로젝트는 여러 개의 모듈로 이루어진다.
모듈은 직접 만들 수도 있고, 필요한 기능을 구현해둔 라이브러리를 가져와 붙일 수도 있다.
모듈 안에는 폴더와 파일이 들어갈 수 있다. 코틀린 코드(.kt)파일 뿐만이 아니라,
모듈 관련 설정 및 리소스 파일도 포함될 수 있다.
이렇게 프로젝트, 모듈, 폴더 및 파일이 실제 파일 시스템에 기반한 물리적인 구조를 담당한다고 하면,
논리적인 구조로는 패키지라는 것이 있는데, 개발 시에 소스 코드의 소속을 지정하기 위한
논리적 단위이다. 코드를 작성할 때는 코드 내에서 사용하는 이름이 용도에 따라 서로 충돌하지 않도록
패키지 이름을 지정해주는 것이 좋다. 일반적으로 패키지 이름을 지정해주는 경우에는
개발한 회사가 가진 도메인을 거꾸로 배열하고, 그 뒤에 프로젝트 명을 붙인 후에 그 후에 기능별로
세분화하는 이름을 붙여주는 식으로 작성한다.
그럼 어떻게 코드파일들을 패키지로 묶을 수 있을까?
코드 파일 맨 윗쪽에 package를 적고 패키지 이름을 써 주면 된다.
패키지를 명시하지 않을 경우, 자동으로 default 패키지로 묶이게 된다.

자바와 달리 코틀린은 폴더 구조와 패키지 명을 일치시키지 않아도 된다.
단순히 파일 상단에 패키지만 명시해주면 컴파일러가 알아서 처리하게 된다.
하지만 같은 패키지 내에서는 변수,함수, 클래스를 공유할 수 있지만,
패키지가 다를 경우 import 작업을 해야 한다.
코브 파일 내에서 패키지 선언 바로 아래에 import를 쓰고,
사용할 외부 패키지 이름을 써 주면, 다른 패키지의 변수나 함수, 클래스 등을
그대로 사용할 수 있다. 만약 이름이 중복된다면, 패키지 명을 포함한 풀네임을 명시해야 한다.

자바와 달리 코틀린은 클래스명과 파일명이 일치하지 않아도 되며,
하나의 파일에 여러 개의 클래스를 넣어도 알아서 컴파일이 가능하다.
이는 파일이나 폴더를 기준으로 구분하지 않고,
파일 내에 있는 package 키워드를 기준으로 구분하기 때문이다.
*/