/*
Scope & Access Modifier
공용 범위를 제안하는 스코프와 스코프 내부로의 접근을 제어하는 접근 제어자

Scope: 멤버들을 서로 공유하여 사용할 수 있는 범위를 지정해둔 단위.
패키지 - 클래스 - 함수로 나뉜다.
1) 스코프 외부에서는 스코프 내부의 멤버를 참조 연산자로만 참조가 가능하다.
2) 동일 스코프 내에서는 멤버들을 공유할 수 있다.
3) 하위 스코프에서는 상위 스코프 멤버를 재정의 할 수 있다.
원래 동일한 함수명을 사용하면 conflicting declarations으로 선언부가 서로 충돌하는
에러가 나지만, 하위 스코프에서는 같은 이름의 멤버를 만들어 사용할 수 있다.
 */

// 2) 변수 a는 class B나 메인 함수에 속해 있지는 않지만, 동일한 패키지 스코프 안에서
// 공유돼서 사용될 수 있다.
val a = "패키지 스코프"

class B {
    // 3) 상위 스코프의 변수 a를 참조하지 않고, 각각의 스코프에 있는 값을 참조한다.
    val a = "클래스 스코프"
    fun print() {
        println(a)
    }
}

fun main() {
    // 3) 상위 스코프의 변수 a를 참조하지 않고, 각각의 스코프에 있는 값을 참조한다.
    val a = "함수 스코프"
    println(a)
    B().print()
}

/*
접근 제어자: 스코프 외부에서 스코프 내부에 접근할 때, 그 권한을 개발자가 제어할 수 있는 기능.
public, internal, private, protected가 있다.
변수, 함수, 클래스 선언 시 맨 앞에 붙여 사용한다.
private var a = "..."
public fun b {...}
internal class C {...}
1) 패키지 스코프: protected은 사용하지 않음.
- public(기본값): 어떤 패키지에서도 접근 가능
- internal: 같은 모듈 내에서만 접근 가능
- private: 같은 파일 내에서만 접근 가능.
2) 클래스 스코프에서는: internal은 사용하지 않은.
- public(기본값): 클래스 외부에서 늘 접근 가능.
- private: 클래스 내부에서만 접근 가능.
- protected: 클래스 자신과 상속받은 클래스에서 접근 가능.
 */